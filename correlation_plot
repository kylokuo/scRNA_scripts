###相关性函数
library(Seurat)
library(ggplot2)
library(ggpubr)

correlation_plot <- function(seurat_obj, 
                             feature1, 
                             feature2,
                             correlation_method = "pearson",
                             point_size = 0.5,
                             point_alpha = 0.6,
                             color = "#2c7bb6") {
  # 提取数据
  plot_data <- FetchData(seurat_obj, vars = c(feature1, feature2))
  
  # 特征存在性检查
  if(ncol(plot_data) != 2) {
    missing_features <- setdiff(c(feature1, feature2), colnames(plot_data))
    stop("Missing features: ", paste(missing_features, collapse = ", "))
  }
  
  # 重命名列
  colnames(plot_data) <- c("x", "y")
  
  # 计算相关系数
  cor_test <- cor.test(plot_data$x, plot_data$y, method = correlation_method)
  
  # 构建统计标注文本
  r_value <- format(cor_test$estimate, digits = 3)
  p_value <- ifelse(cor_test$p.value < 0.001, "< 0.001",
                    format(cor_test$p.value, digits = 3))
  annotation_text <- paste0("r = ", r_value, "\n", "p = ", p_value)
  
  # 生成基因名的斜体标签函数
  format_label <- function(feature) {
    if(grepl("^[A-Za-z0-9]+$", feature)) {
      bquote(italic(.(feature)))
    } else {
      feature
    }
  }
  
  # 绘制图形
  ggplot(plot_data, aes(x = x, y = y)) +
    geom_point(size = point_size, alpha = point_alpha, color = color) +
    geom_smooth(method = "lm", formula = y ~ x, 
                color = "#d7191c", fill = "grey70", 
                alpha = 0.3, level = 0.95) +
    annotate("text", x = -Inf, y = Inf, 
             label = annotation_text,
             hjust = -0.1, vjust = 1.5, 
             size = 5, color = "black") +
    labs(x = format_label(feature1),
         y = format_label(feature2)) +
    theme_classic(base_size = 14) +
    theme(
      axis.title.x = element_text(face = ifelse(grepl("^[A-Za-z0-9]+$", feature1), 
                                                "italic", "plain")),
      axis.title.y = element_text(face = ifelse(grepl("^[A-Za-z0-9]+$", feature2), 
                                                "italic", "plain")),
      panel.grid.major = element_line(color = "grey90", linewidth = 0.2),
      plot.margin = unit(c(1, 2, 1, 1), "cm")
    )
}

# 使用示例
p <- correlation_plot(
  seurat_obj = MDSC,
  feature1 = "SLC2A3",
  feature2 = "HK2",
  correlation_method = "pearson",
  point_size = 0.8,
  color = "black"
)
print(p)
ggsave("GLUT3_Immusup_cor.pdf", plot = p, 
       width = 4, height = 3.5, dpi = 300)


correlation_plot_new <- function(seurat_obj, 
                             feature1, 
                             feature2,
                             correlation_method = "pearson",
                             point_size = 0.5,
                             point_alpha = 0.6,
                             color = "#2c7bb6",
                             refine = FALSE) {  # 添加 refine 参数，默认值为 FALSE
  # 提取数据
  plot_data <- FetchData(seurat_obj, vars = c(feature1, feature2))
  
  # 特征存在性检查
  if(ncol(plot_data) != 2) {
    missing_features <- setdiff(c(feature1, feature2), colnames(plot_data))
    stop("Missing features: ", paste(missing_features, collapse = ", "))
  }
  
  # 重命名列
  colnames(plot_data) <- c("x", "y")
  
  # 如果 refine = TRUE，剔除表达量为0的点
  if (refine) {
    plot_data <- plot_data[plot_data$x != 0 & plot_data$y != 0, ]
    if (nrow(plot_data) == 0) {
      stop("在 refine = TRUE 下，所有点的表达量均为0，无法绘图。")
    }
  }
  
  # 计算相关系数
  cor_test <- cor.test(plot_data$x, plot_data$y, method = correlation_method)
  
  # 构建统计标注文本
  r_value <- format(cor_test$estimate, digits = 3)
  p_value <- ifelse(cor_test$p.value < 0.001, "< 0.001",
                    format(cor_test$p.value, digits = 3))
  annotation_text <- paste0("r = ", r_value, "\n", "p = ", p_value)
  
  # 生成基因名的斜体标签函数
  format_label <- function(feature) {
    if(grepl("^[A-Za-z0-9]+$", feature)) {
      bquote(italic(.(feature)))
    } else {
      feature
    }
  }
  
  # 绘制图形
  ggplot(plot_data, aes(x = x, y = y)) +
    geom_point(size = point_size, alpha = point_alpha, color = color) +
    geom_smooth(method = "lm", formula = y ~ x, 
                color = "#d7191c", fill = "grey70", 
                alpha = 0.3, level = 0.95) +
    annotate("text", x = -Inf, y = Inf, 
             label = annotation_text,
             hjust = -0.1, vjust = 1.5, 
             size = 5, color = "black") +
    labs(x = format_label(feature1),
         y = format_label(feature2)) +
    theme_classic(base_size = 14) +
    theme(
      axis.title.x = element_text(face = ifelse(grepl("^[A-Za-z0-9]+$", feature1), 
                                                "italic", "plain")),
      axis.title.y = element_text(face = ifelse(grepl("^[A-Za-z0-9]+$", feature2), 
                                                "italic", "plain")),
      panel.grid.major = element_line(color = "grey90", linewidth = 0.2),
      plot.margin = unit(c(1, 2, 1, 1), "cm")
    )
}
